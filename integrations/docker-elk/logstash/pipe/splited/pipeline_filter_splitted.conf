input {
  beats {
    port => 5044
  }
}

filter {
  xml {
    source => "message"
    store_xml => false
    namespaces => {
      "xccdf" => "http://checklists.nist.gov/xccdf/1.2"
    }
    xpath => {
      "//xccdf:TestResult/xccdf:target/text()" => "Target_Hostname"
      "//xccdf:TestResult/xccdf:target-address[2]/text()" => "Ip_Target"
      "//xccdf:TestResult/@id" => "TestResult_id"
      "//xccdf:TestResult/xccdf:identity/text()" => "user_exec"
      "//xccdf:TestResult/xccdf:identity/@privileged" => "exec_sudo"
    }
  }

  ruby {
    code => '
      require "nokogiri"
      xml_doc = Nokogiri::XML(event.get("message"))
      xml_doc.remove_namespaces!

      rule_results = xml_doc.xpath("//rule-result")
      filtered_rule_results = []

      rule_results.each do |rule_result|
        result_text = rule_result.xpath("result").text
        next if result_text == "notselected"
        attributes = {
          "idref" => rule_result.attr("idref"),
          "role" => rule_result.attr("role"),
          "time" => rule_result.attr("time"),
          "severity" => rule_result.attr("severity"),
          "weight" => rule_result.attr("weight"),
          "result" => result_text,
          "ident" => rule_result.xpath("ident").text
        }
        filtered_rule_results << attributes
      end
      event.set("rule_results", filtered_rule_results) unless filtered_rule_results.empty?
    '
  }

  split {
    field => "rule_results"
  }

  mutate {
    add_field => {
      "idref" => "%{[rule_results][idref]}"
      "role" => "%{[rule_results][role]}"
      "time" => "%{[rule_results][time]}"
      "severity" => "%{[rule_results][severity]}"
      "weight" => "%{[rule_results][weight]}"
      "result" => "%{[rule_results][result]}"
      "ident" => "%{[rule_results][ident]}"
    }
    remove_field => ["rule_results", "message", "event"]
    gsub => [
      "Target_Hostname", "[\"\[\]]", "",
      "Ip_Target", "[\"\[\]]", "",
      "TestResult_id", "[\"\[\]]", "",
      "user_exec", "[\"\[\]]", "",
      "exec_sudo", "[\"\[\]]", ""
    ]
  }
}

output {
  elasticsearch {
    hosts => ["https://elasticsearch:9200/"]
    user => "elastic"
    password => "changeme"
    ssl => true
    cacert => '/usr/share/logstash/config/ca.crt'
    index => "oscap-%{+YYYY.MM.dd}"
  }
  stdout {
    codec => rubydebug
  }
}
